import logging
import re
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from tg_news_feed.config import config
from tg_news_feed.storage.repo import Repository
from tg_news_feed.parser.fetcher import TelegramFetcher

logger = logging.getLogger(__name__)
router = Router()


def is_admin(user_id: int) -> bool:
    """Check if user is an admin."""
    return user_id in config.ADMIN_IDS


# Middleware to check admin status
@router.message(Command("stats"))
async def cmd_stats(message: Message, repo: Repository):
    """Handle /stats command - show statistics."""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    stats = repo.get_stats()
    
    await message.answer(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['posts']}\n"
        f"üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['channels']}\n"
        f"‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {stats['saved_posts']}",
        parse_mode="Markdown"
    )


@router.message(Command("addchannel"))
async def cmd_add_channel(message: Message, repo: Repository, fetcher: TelegramFetcher):
    """Handle /addchannel command."""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # Extract channel username from command
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: `/addchannel @example_channel`",
            parse_mode="Markdown"
        )
        return
    
    channel_username = args[1].strip()
    
    # Basic validation
    if not channel_username.startswith("@"):
        await message.answer(
            "‚ö†Ô∏è Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @.\n"
            "–ü—Ä–∏–º–µ—Ä: `/addchannel @example_channel`",
            parse_mode="Markdown"
        )
        return
    
    # Remove @ for database storage but keep it for display
    clean_username = channel_username[1:]
    
    # Try to add channel
    try:
        await message.answer(f"üîÑ –î–æ–±–∞–≤–ª—è—é –∫–∞–Ω–∞–ª {channel_username}...")
        
        # Add to database
        channel = repo.add_channel(username=clean_username)
        
        if not channel:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {channel_username}.")
            return
        
        # Immediate fetch of the channel's posts
        channel_dict = {
            'id': channel.id,
            'username': clean_username,
            'title': None
        }
        
        await message.answer(f"üîÑ –ü–æ–ª—É—á–∞—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ {channel_username}...")
        new_posts = await fetcher.fetch_channel_posts(channel_dict)
        
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {new_posts}",
        )
        
    except Exception as e:
        logger.error(f"Error adding channel {channel_username}: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:\n{str(e)}",
        )


@router.message(Command("suggestions"))
async def cmd_suggestions(message: Message, repo: Repository):
    """Handle /suggestions command - list channel suggestions."""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    suggestions = repo.get_suggestions()
    
    if not suggestions:
        await message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    # Show up to 10 latest suggestions
    text = "üìã *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:*\n\n"
    
    for i, suggestion in enumerate(suggestions[:10], 1):
        text += f"{i}. *{suggestion.channel_username}*\n"
        text += f"   –û—Ç: `{suggestion.user_id}`\n"
        text += f"   –î–∞—Ç–∞: {suggestion.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        if suggestion.comment:
            text += f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: _{suggestion.comment}_\n"
        text += "\n"
    
    if len(suggestions) > 10:
        text += f"\n_...–∏ –µ—â—ë {len(suggestions) - 10} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π_"
    
    text += "\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/addchannel @username`"
    
    await message.answer(text, parse_mode="Markdown") 